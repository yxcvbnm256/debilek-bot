# Stage 1: Build stage (optional, if you cross-compile outside the Docker build)
# You can omit this if you build your binary outside Docker (e.g., with cross or on ARM machine)
FROM rust:1.87 AS builder

WORKDIR /usr/src/debilek-bot

# Install build dependencies (adjust if needed)
RUN apt-get update && apt-get install -y \
    curl \
    unzip \
    build-essential \
    pkg-config

# Install CMake 3.27.0 for ARM64
RUN curl -L https://github.com/Kitware/CMake/releases/download/v3.27.0/cmake-3.27.0-linux-aarch64.tar.gz -o cmake.tar.gz && \
    tar -xzf cmake.tar.gz && \
    cp -r cmake-3.27.0-linux-aarch64/bin/* /usr/local/bin/ && \
    cp -r cmake-3.27.0-linux-aarch64/share/* /usr/local/share/ && \
    rm -rf cmake.tar.gz cmake-3.27.0-linux-aarch64

COPY . .

RUN cargo build --release --target aarch64-unknown-linux-gnu

# Stage 2: Runtime stage
FROM debian:bookworm-slim

RUN apt-get update && apt-get install -y libssl3 ca-certificates && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the ARM64 binary built in stage 1
COPY --from=builder /usr/src/debilek-bot/target/aarch64-unknown-linux-gnu/release/debilek-bot /usr/local/bin/debilek-bot

RUN chmod +x /usr/local/bin/debilek-bot

# Copy assets and .env if needed
COPY --from=builder /usr/src/debilek-bot/assets ./assets
COPY --from=builder /usr/src/debilek-bot/.env ./.env

EXPOSE 3000

ENTRYPOINT ["/usr/local/bin/debilek-bot"]